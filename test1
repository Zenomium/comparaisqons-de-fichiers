#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include "image_read.h"
#include "pixmap.h"
#include "heap.h"
#include <math.h>
#include "compress.h"

void help(char* argv){
    fprintf(stdout,"usage : %s [OPTIONS] : \n", argv);
    fprintf(stdout,"-c : encodeur\n");
    fprintf(stdout,"-u : décodeur\n");
    fprintf(stdout,"-i : Nom du fichier d'entrée à préciser \n");
    fprintf(stdout,"-o : Nom du fichier de sortie à préciser \n");
    fprintf(stdout,"-g : édition de la grille de segmentation \n");
    fprintf(stdout,"-a : Facteur alpha pour le filtrage (par défaut : 1.0) \n");
    fprintf(stdout,"-v : Mode bavard \n");
    fprintf(stdout,"-h : aide \n");
    fprintf(stdout,"Les autres options seront ignorées\n");
    fprintf(stdout, "\n");
}

int main(int argc, char *argv[]) {
    int opt;
    char* output_file = NULL;
    char* input_file = NULL;
    int encodes = 0;
    int decodes = 0;
    double alpha = 1.0;  // Facteur alpha par défaut
    int verbose_mode = 0;
    int grid = 0;

    while ((opt = getopt(argc, argv, "cu:i:o:ghva:")) != -1) {
        switch (opt) {
            case 'c':
                encodes = 1;
                break;
            case 'u':
                decodes = 1;
                input_file = optarg;
                break;
            case 'i':
                if (optarg[0] == '-') {
                    optind--;
                    input_file = NULL;
                } else {
                    input_file = optarg;
                }
                break;
            case 'o':
                if (optarg[0] == '-') {
                    optind--;
                    output_file = NULL;
                } else {
                    output_file = optarg;
                }
                break;
            case 'a':
                alpha = atof(optarg);
                break;
            case 'g':
                grid = 1;
                break;
            case 'h':
                help(argv[0]);
                return 0;
            case 'v':
                verbose_mode = 1;
                break;
            default:
                break;
        }
    }

    if (verbose_mode) {
        if (encodes) printf("encodage on\n");
        else printf("encodage off\n");
        if (decodes) printf("decodage on\n");
        else printf("decodage off\n");
        if (input_file) printf("source : %s\n", input_file);
        if (output_file) printf("sortie : %s\n", output_file);
        if (grid) printf("grid on\n");
        else printf("grid off\n");
    }

    if (!encodes && !decodes) {
        fprintf(stderr, "Erreur ! Vous devez spécifier '-c' ou '-u'.\n");
        return 1;
    }

    if (!input_file) {
        fprintf(stderr, "Fichier d'entrée à spécifier avec '-i'.\n");
        return 1;
    }

    if (!output_file) {
        output_file = encodes ? "output.qtc" : "output.pgm";
    }

    if (encodes) {
        PGMImage* image = readPGM(input_file);
        int val = logBase2(image->height);
        Heap* heap = initHeap(sumPower4(val));
        heap->nb_leaves = power(2, val) * power(2, val);
        unsigned char** pixmap = createpixmaptab(image->height);
        fillPGM(image, pixmap);

        // Calcul des statistiques pour la variance
        double medvar = calculate_median_variance(pixmap, image->height);
        double maxvar = calculate_max_variance(pixmap, image->height);

        if (verbose_mode) {
            printf("Médiane de la variance : %.2f\n", medvar);
            printf("Variance maximale : %.2f\n", maxvar);
        }

        // Filtrage du quadtree avec les paramètres calculés
        fill_heap(heap, pixmap, 0, 0, image->width, 0, image->width);
        if (grid) {
            filter_quadtree(heap, medvar, maxvar, alpha);
        }

        uchar* encoded = calloc(50000000, sizeof(uchar));
        encode(heap, encoded, output_file);

        // Libération de la mémoire
        for (int i = 0; i < image->height; i++) {
            free(pixmap[i]);
        }
        free(image->data);
        free(image);
        free(pixmap);
        free(heap->tab);
        free(heap);
    }

    if (decodes) {
        Heap* dest = decode(input_file);
        int img_side = (int)sqrt(dest->nb_leaves);
        unsigned char** pixmap2 = createpixmaptab(img_side);
        fill_pixmap_from_heap(dest, pixmap2, 0, 0, 0, img_side);

        if (grid) {
            generate_segmentation_grid(pixmap2, img_side, output_file);
        } else {
            create_pgm_from_pixmap(pixmap2, output_file, img_side);
        }

        // Libération de la mémoire
        for (int i = 0; i < img_side; i++) {
            free(pixmap2[i]);
        }
        free(pixmap2);
        free(dest->tab);
        free(dest);
    }

    return 0;
}
